version: '3.8'

networks:
  kafka-network:
    driver: bridge

volumes:
  kafka-data:
  notification-logs:

services:
  zookeeper:
    image: 'wurstmeister/zookeeper:latest'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-network

  kafka:
    image: 'wurstmeister/kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://[::1]:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - kafka-network

  user-service:
    build: ./user_service
    container_name: user_service
    restart: always
    ports:
      - "${PORT_USER_SERVICE}:${PORT_USER_SERVICE}"
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - PORT=${PORT_USER_SERVICE}
    networks:
      - kafka-network

  reservation-service:
    build: ./reservation_service
    container_name: reservation_service
    restart: always
    ports:
      - "${PORT_RESERVATION_SERVICE}:${PORT_RESERVATION_SERVICE}"
    depends_on:
      - kafka
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - KAFKA_BROKER=kafka:9092
      - PORT=${PORT_RESERVATION_SERVICE}
    networks:
      - kafka-network

  notification-service:
    build: ./notification_service
    container_name: notification_service
    restart: always
    ports:
      - "${PORT_NOTIFICATION_SERVICE}:${PORT_NOTIFICATION_SERVICE}"
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
      - PORT=${PORT_NOTIFICATION_SERVICE}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
    volumes:
      - notification-logs:/app/logs
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT_NOTIFICATION_SERVICE}/health"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  salle-service:
    build: ./salle_service
    container_name: salle_service
    restart: always
    ports:
      - "${PORT_SALLE_SERVICE}:${PORT_SALLE_SERVICE}"
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - PORT=${PORT_SALLE_SERVICE}
    networks:
      - kafka-network

  historique-service:
    build: ./historique_service
    container_name: historique_service
    restart: always
    ports:
      - "${PORT_HISTORIQUE_SERVICE}:${PORT_HISTORIQUE_SERVICE}"
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - PORT=${PORT_HISTORIQUE_SERVICE}
    networks:
      - kafka-network
